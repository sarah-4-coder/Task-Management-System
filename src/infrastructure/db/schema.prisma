generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserLogin {
  id          String @id @default(uuid())
  email       String
  password    String
  institution String
}

model User {
  id             String    @id @default(uuid())
  name           String
  image          String?
  color          String
  projects       Project[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  issueReporters Issue[]   @relation("issue_reporter")
  issueAssignees Issue[]   @relation("issue_assignee")
  issueComments  Comment[]
}

model Project {
  id          String     @id @default(uuid())
  name        String
  description String?
  users       User[]
  categories  Category[]
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  type      String   @default("TODO") // TODO: apply check constraint to emulate enum
  name      String
  order     Int
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id          String    @id @default(uuid())
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  name        String
  description String?
  reporter    User      @relation("issue_reporter", fields: [reporterId], references: [id])
  reporterId  String
  asignee     User      @relation("issue_assignee", fields: [asigneeId], references: [id])
  asigneeId   String
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  priority    Priority  @relation(fields: [priorityId], references: [id])
  priorityId  String
}

model Comment {
  id        String   @id @default(uuid())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Priority {
  id        String   @id @default(uuid())
  order     Int
  name      String
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/components/theme-switcher.tsx"],"names":["addons","types","ADDON_ID","THEME_SWITCHER_ID","PARAM_KEY","DEFAULT_ADDON_STATE","DEFAULT_THEME_PARAMETERS","THEMING_EVENTS","React","Fragment","useMemo","useAddonState","useChannel","useGlobals","useParameter","styled","Icons","IconButton","WithTooltip","TooltipLinkList","IconButtonLabel","theme","hasMultipleThemes","themesList","ThemeSwitcher","themeOverride","selected","updateGlobals","themeDefault","updateState","themes","defaultTheme","state","label","themeName","onHide","api","viewMode"],"mappings":"AAAA,OAAS,UAAAA,EAAQ,SAAAC,MAAa,yBCAvB,IAAMC,EAAW,2BACXC,EAAoB,GAAGD,mBACvBE,EAAY,UAQlB,IAAMC,EAAuC,CAClD,WAAY,CAAC,EACb,aAAc,MAChB,EAMaC,EAA4C,CAAC,EAE7CC,EAAiB,CAC5B,gBAAiB,GAAGJ,mBACtB,ECvBA,OAAOK,GAAS,YAAAC,EAAU,WAAAC,MAAe,QACzC,OACE,iBAAAC,EACA,cAAAC,EACA,cAAAC,EACA,gBAAAC,MACK,iBACP,OAAS,UAAAC,MAAc,qBACvB,OACE,SAAAC,EACA,cAAAC,EACA,eAAAC,EACA,mBAAAC,MACK,wBAYP,IAAMC,EAAkBL,EAAO,IAAI,CAAC,CAAE,MAAAM,CAAM,KAAO,CACjD,SAAUA,EAAM,WAAW,KAAK,GAAK,EACrC,WAAY,EACd,EAAE,EAEIC,EAAqBC,GACzBA,EAAW,OAAS,EAETC,EAAgB,IAAM,CACjC,GAAM,CAAE,cAAAC,CAAc,EAAIX,EACxBV,EACAE,CACF,EACM,CAAC,CAAE,MAAOoB,CAAS,EAAGC,CAAa,EAAId,EAAW,EAElD,CAAC,CAAE,WAAAU,EAAY,aAAAK,CAAa,EAAGC,CAAW,EAC9ClB,EAA+BR,EAAmBE,CAAmB,EAEvEO,EAAW,CACT,CAACL,EAAe,eAAe,EAAG,CAAC,CAAE,OAAAuB,EAAQ,aAAAC,CAAa,IAAM,CAC9DF,EAAaG,IAAW,CACtB,GAAGA,EACH,WAAYF,EACZ,aAAcC,CAChB,EAAE,CACJ,CACF,CAAC,EAED,IAAME,EAAQvB,EAAQ,IAAM,CAC1B,GAAIe,EACF,MAAO,iBAGT,IAAMS,EAAYR,GAAYE,EAE9B,OAAOM,GAAa,GAAGA,SACzB,EAAG,CAACT,EAAeG,EAAcF,CAAQ,CAAC,EAE1C,OACEJ,EAAkBC,CAAU,GAC1Bf,EAAA,cAACC,EAAA,KACCD,EAAA,cAACU,EAAA,CACC,UAAU,MACV,QAAQ,QACR,aAAY,GACZ,QAAS,CAAC,CAAE,OAAAiB,CAAO,IAEf3B,EAAA,cAACW,EAAA,CACC,MAAOI,EAAW,IAAKF,IAAW,CAChC,GAAIA,EACJ,MAAOA,EACP,OAAQK,IAAaL,EACrB,QAAS,IAAM,CACbM,EAAc,CAAE,MAAAN,CAAM,CAAC,EACvBc,EAAO,CACT,CACF,EAAE,EACJ,GAIJ3B,EAAA,cAACS,EAAA,CACC,IAAKd,EACL,OAAQ,CAACsB,EACT,MAAM,SAENjB,EAAA,cAACQ,EAAA,CAAM,KAAK,aAAa,EACxBiB,GAASzB,EAAA,cAACY,EAAA,KAAiBa,CAAM,CACpC,CACF,CACF,CAGN,EF3FAjC,EAAO,SAASE,EAAWkC,GAAQ,CAEjCpC,EAAO,IAAIG,EAAmB,CAC5B,KAAMF,EAAM,KACZ,MAAO,QACP,MAAO,CAAC,CAAE,SAAAoC,CAAS,IAAM,CAAC,EAAEA,GAAYA,EAAS,MAAM,gBAAgB,GACvE,OAAQb,EACR,SAAUpB,CACZ,CAAC,CACH,CAAC","sourcesContent":["import { addons, types } from \"@storybook/manager-api\";\n\nimport { ADDON_ID, PARAM_KEY, THEME_SWITCHER_ID } from \"./constants\";\n\nimport { ThemeSwitcher } from \"./components/theme-switcher\";\n\n// Register the addon\naddons.register(ADDON_ID, (api) => {\n  // Register the theme switcher\n  addons.add(THEME_SWITCHER_ID, {\n    type: types.TOOL,\n    title: `Theme`,\n    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),\n    render: ThemeSwitcher,\n    paramKey: PARAM_KEY,\n  });\n});\n","export const ADDON_ID = \"@storybook/addon-styling\" as const;\nexport const THEME_SWITCHER_ID = `${ADDON_ID}/theme-switcher` as const;\nexport const PARAM_KEY = \"theming\" as const;\nexport const GLOBAL_KEY = \"theme\" as const;\n\nexport interface ThemeAddonState {\n  themesList: string[];\n  themeDefault?: string;\n}\n\nexport const DEFAULT_ADDON_STATE: ThemeAddonState = {\n  themesList: [],\n  themeDefault: undefined,\n};\n\nexport interface ThemeParameters {\n  themeOverride?: string;\n}\n\nexport const DEFAULT_THEME_PARAMETERS: ThemeParameters = {};\n\nexport const THEMING_EVENTS = {\n  REGISTER_THEMES: `${THEME_SWITCHER_ID}/REGISTER_THEMES`,\n} as const;\n","import React, { Fragment, useMemo } from \"react\";\nimport {\n  useAddonState,\n  useChannel,\n  useGlobals,\n  useParameter,\n} from \"@storybook/api\";\nimport { styled } from \"@storybook/theming\";\nimport {\n  Icons,\n  IconButton,\n  WithTooltip,\n  TooltipLinkList,\n} from \"@storybook/components\";\n\nimport {\n  PARAM_KEY,\n  THEME_SWITCHER_ID,\n  THEMING_EVENTS,\n  DEFAULT_ADDON_STATE,\n  DEFAULT_THEME_PARAMETERS,\n  ThemeAddonState,\n  ThemeParameters,\n} from \"../constants\";\n\nconst IconButtonLabel = styled.div(({ theme }) => ({\n  fontSize: theme.typography.size.s2 - 1,\n  marginLeft: 10,\n}));\n\nconst hasMultipleThemes = (themesList: ThemeAddonState[\"themesList\"]) =>\n  themesList.length > 1;\n\nexport const ThemeSwitcher = () => {\n  const { themeOverride } = useParameter<ThemeParameters>(\n    PARAM_KEY,\n    DEFAULT_THEME_PARAMETERS\n  );\n  const [{ theme: selected }, updateGlobals] = useGlobals();\n\n  const [{ themesList, themeDefault }, updateState] =\n    useAddonState<ThemeAddonState>(THEME_SWITCHER_ID, DEFAULT_ADDON_STATE);\n\n  useChannel({\n    [THEMING_EVENTS.REGISTER_THEMES]: ({ themes, defaultTheme }) => {\n      updateState((state) => ({\n        ...state,\n        themesList: themes,\n        themeDefault: defaultTheme,\n      }));\n    },\n  });\n\n  const label = useMemo(() => {\n    if (themeOverride) {\n      return `Story override`;\n    }\n\n    const themeName = selected || themeDefault;\n\n    return themeName && `${themeName} theme`;\n  }, [themeOverride, themeDefault, selected]);\n\n  return (\n    hasMultipleThemes(themesList) && (\n      <Fragment>\n        <WithTooltip\n          placement=\"top\"\n          trigger=\"click\"\n          closeOnClick\n          tooltip={({ onHide }) => {\n            return (\n              <TooltipLinkList\n                links={themesList.map((theme) => ({\n                  id: theme,\n                  title: theme,\n                  active: selected === theme,\n                  onClick: () => {\n                    updateGlobals({ theme });\n                    onHide();\n                  },\n                }))}\n              />\n            );\n          }}\n        >\n          <IconButton\n            key={THEME_SWITCHER_ID}\n            active={!themeOverride}\n            title=\"Theme\"\n          >\n            <Icons icon=\"paintbrush\" />\n            {label && <IconButtonLabel>{label}</IconButtonLabel>}\n          </IconButton>\n        </WithTooltip>\n      </Fragment>\n    )\n  );\n};\n"]}
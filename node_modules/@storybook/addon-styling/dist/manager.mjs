import { addons, types } from '@storybook/manager-api';
import n, { useMemo, Fragment } from 'react';
import { useParameter, useGlobals, useAddonState, useChannel } from '@storybook/api';
import { styled } from '@storybook/theming';
import { WithTooltip, TooltipLinkList, IconButton, Icons } from '@storybook/components';

var i="@storybook/addon-styling",s=`${i}/theme-switcher`,m="theming";var h={themesList:[],themeDefault:void 0},c={},p={REGISTER_THEMES:`${s}/REGISTER_THEMES`};var O=styled.div(({theme:e})=>({fontSize:e.typography.size.s2-1,marginLeft:10})),P=e=>e.length>1,l=()=>{let{themeOverride:e}=useParameter(m,c),[{theme:t},A]=useGlobals(),[{themesList:a,themeDefault:T},S]=useAddonState(s,h);useChannel({[p.REGISTER_THEMES]:({themes:o,defaultTheme:r})=>{S(_=>({..._,themesList:o,themeDefault:r}));}});let E=useMemo(()=>{if(e)return "Story override";let o=t||T;return o&&`${o} theme`},[e,T,t]);return P(a)&&n.createElement(Fragment,null,n.createElement(WithTooltip,{placement:"top",trigger:"click",closeOnClick:!0,tooltip:({onHide:o})=>n.createElement(TooltipLinkList,{links:a.map(r=>({id:r,title:r,active:t===r,onClick:()=>{A({theme:r}),o();}}))})},n.createElement(IconButton,{key:s,active:!e,title:"Theme"},n.createElement(Icons,{icon:"paintbrush"}),E&&n.createElement(O,null,E))))};addons.register(i,e=>{addons.add(s,{type:types.TOOL,title:"Theme",match:({viewMode:t})=>!!(t&&t.match(/^(story|docs)$/)),render:l,paramKey:m});});
//# sourceMappingURL=out.js.map
//# sourceMappingURL=manager.mjs.map
import { logger, colors } from '@storybook/node-logger';

var n=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,o)=>(typeof require<"u"?require:t)[o]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var y=e=>typeof e!="string"&&e.test instanceof RegExp&&e.test.test("test.css"),f=e=>({loader:n.resolve("style-loader")}),m=({cssModules:e})=>e?typeof e=="object"?{modules:{...e}}:{modules:{auto:!0}}:{},S=({css:e,cssModules:t,postCss:o})=>{let s=o?{importLoaders:1,...e}:{...e},r=m({cssModules:t});return {loader:n.resolve("css-loader"),options:{...s,...r}}},b=({postCss:e})=>{let t=typeof e=="object"?{...e}:{};return {loader:n.resolve("postcss-loader"),options:{...t}}},g=/\.css$/,R=e=>{if(e.cssBuildRule)return e.cssBuildRule;let t=[f(),S(e),...e.postCss?[b(e)]:[]];return {test:g,use:t,sideEffects:!0}},d=(e,t)=>{if(!t.postCss&&!t.cssModules&&!t.cssBuildRule)return;let o=e.module?.rules,s=R(t),r=o?.findIndex(y);r===-1?o?.push(s):o[r]=s;};var O=e=>typeof e!="string"&&e.test instanceof RegExp&&(e.test.test("test.scss")||e.test.test("test.sass")),x=e=>({loader:n.resolve("style-loader")}),w=({cssModules:e})=>e?typeof e=="object"?{modules:{...e}}:{modules:{auto:!0}}:{},A=({cssModules:e,postCss:t})=>{let o={importLoaders:t?3:2},s=w({cssModules:e});return {loader:n.resolve("css-loader"),options:{...o,...s}}},C=({postCss:e})=>{let t=typeof e=="object"?{...e}:{};return {loader:n.resolve("postcss-loader"),options:{...t}}},k=e=>({loader:n.resolve("resolve-url-loader")}),L=({sass:e})=>{let t=typeof e=="object"?{sassOptions:e}:{},o=typeof e=="object"&&e.hasOwnProperty("implementation")?{implementation:e.implementation}:{},s=typeof e=="object"&&(e.hasOwnProperty("prependData")||e.hasOwnProperty("additionalData"))?{additionalData:e.prependData||e.additionalData}:{};return {loader:n.resolve("sass-loader"),options:{sourceMap:!0,...t,...o,...s}}},h=/\.s[ac]ss$/,v=e=>{if(e.scssBuildRule)return e.scssBuildRule;let t=[x(),A(e),...e.postCss?[C(e)]:[],k(),L(e)];return {test:h,use:t,sideEffects:!0}},u=(e,t)=>{if(!t.sass&&!t.scssBuildRule)return;let o=e.module?.rules,s=v(t),r=o?.findIndex(O);r===-1?o?.push(s):o[r]=s;};var E=e=>typeof e!="string"&&e.test instanceof RegExp&&e.test.test("test.less"),B=e=>({loader:n.resolve("style-loader")}),j=({cssModules:e})=>e?typeof e=="object"?{modules:{...e}}:{modules:{auto:!0}}:{},q=({cssModules:e,postCss:t})=>{let o={importLoaders:t?2:1},s=j({cssModules:e});return {loader:n.resolve("css-loader"),options:{...o,...s}}},F=({postCss:e})=>{let t=typeof e=="object"?{...e}:{};return {loader:n.resolve("postcss-loader"),options:{...t}}},D=({less:e})=>{let t=typeof e=="object"&&e.hasOwnProperty("implementation")?{implementation:e.implementation}:{},o=typeof e=="object"&&e.hasOwnProperty("additionalData")?{additionalData:e.additionalData}:{},s=typeof e=="object"&&e.hasOwnProperty("lessOptions")?{lessOptions:e.lessOptions}:{};return {loader:n.resolve("less-loader"),options:{sourceMap:!0,...t,...o,...s}}},P=/\.less$/i,$=e=>{if(e.lessBuildRule)return e.lessBuildRule;let t=[B(),q(e),...e.postCss?[F(e)]:[],D(e)];return {test:P,use:t,sideEffects:!0}},p=(e,t)=>{if(!t.less&&!t.lessBuildRule)return;let o=e.module?.rules,s=$(t),r=o?.findIndex(E);r===-1?o?.push(s):o[r]=s;};function a(e,t={}){return d(e,t),u(e,t),p(e,t),e}function c(e,t={}){return t.cssModules&&logger.warn(`[@storybook/addon-styling] "${colors.blue("options.cssModules")}" is for webpack only. Vite comes preconfigured with css-module support.`),t.cssBuildRule&&logger.warn(`[@storybook/addon-styling] "${colors.blue("options.cssBuildRule")}" is for webpack only. To customize your CSS build, update your Vite config.`),t.postCss&&logger.warn(`[@storybook/addon-styling] "${colors.blue("options.postCss")}" is for webpack only. Vite comes preconfigured with PostCSS support.`),t.sass&&logger.warn(`[@storybook/addon-styling] "${colors.blue("options.sass")}" is for webpack only. Vite comes preconfigured with Sass/Scss support.`),t.scssBuildRule&&logger.warn(`[@storybook/addon-styling] "${colors.blue("options.scssBuildRule")}" is for webpack only. Vite comes preconfigured with Sass/Scss support.`),t.less&&logger.warn(`[@storybook/addon-styling] "${colors.blue("options.less")}" is for webpack only. Vite comes preconfigured with Less support.`),t.lessBuildRule&&logger.warn(`[@storybook/addon-styling] "${colors.blue("options.lessBuildRule")}" is for webpack only. Vite comes preconfigured with Less support.`),e}var Y=a,Z=c;

export { Z as viteFinal, Y as webpackFinal };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=preset.mjs.map
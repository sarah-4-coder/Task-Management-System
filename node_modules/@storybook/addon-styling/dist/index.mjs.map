{"version":3,"sources":["../src/decorators/class-name.strategy.tsx","../src/decorators/helpers.ts","../src/constants.ts","../src/decorators/data-attribute.strategy.tsx","../src/decorators/provider.strategy.tsx","../src/index.ts"],"names":["useEffect","helpers_exports","__export","initializeThemeState","pluckThemeFromContext","useThemeParameters","addons","useParameter","ADDON_ID","THEME_SWITCHER_ID","PARAM_KEY","GLOBAL_KEY","DEFAULT_THEME_PARAMETERS","THEMING_EVENTS","globals","themeNames","defaultTheme","DEFAULT_ELEMENT_SELECTOR","classStringToArray","classString","withThemeByClassName","themes","parentSelector","storyFn","context","themeOverride","selected","selectedThemeName","parentElement","themeName","className","classes","newThemeClasses","DEFAULT_DATA_ATTRIBUTE","withThemeByDataAttribute","attributeName","themeKey","React","useMemo","pluckThemeFromKeyPairTuple","_","themeConfig","withThemeFromJSXProvider","Provider","GlobalStyles","initialTheme","theme","pairs","src_default"],"mappings":"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","sourcesContent":["import { useEffect } from \"@storybook/preview-api\";\nimport type { DecoratorFunction, Renderer } from \"@storybook/types\";\n\nimport {\n  initializeThemeState,\n  pluckThemeFromContext,\n  useThemeParameters,\n} from \"./helpers\";\n\nexport interface ClassNameStrategyConfiguration {\n  themes: Record<string, string>;\n  defaultTheme: string;\n  parentSelector?: string;\n}\n\nconst DEFAULT_ELEMENT_SELECTOR = \"html\";\n\nconst classStringToArray = (classString: string) =>\n  classString.split(\" \").filter(Boolean);\n\nexport const withThemeByClassName = <TRenderer extends Renderer = Renderer>({\n  themes,\n  defaultTheme,\n  parentSelector = DEFAULT_ELEMENT_SELECTOR,\n}: ClassNameStrategyConfiguration): DecoratorFunction<TRenderer> => {\n  initializeThemeState(Object.keys(themes), defaultTheme);\n\n  return (storyFn, context) => {\n    const { themeOverride } = useThemeParameters();\n    const selected = pluckThemeFromContext(context);\n\n    useEffect(() => {\n      const selectedThemeName = themeOverride || selected || defaultTheme;\n      const parentElement = document.querySelector(parentSelector);\n\n      Object.entries(themes)\n        .filter(([themeName]) => themeName !== selectedThemeName)\n        .forEach(([themeName, className]) => {\n          const classes = classStringToArray(className);\n          if (classes.length > 0) {\n            parentElement.classList.remove(...classes);\n          }\n        });\n\n      const newThemeClasses = classStringToArray(themes[selectedThemeName]);\n\n      if (newThemeClasses.length > 0) {\n        parentElement.classList.add(...newThemeClasses);\n      }\n    }, [themeOverride, selected, parentSelector]);\n\n    return storyFn();\n  };\n};\n","import { addons, useParameter } from \"@storybook/preview-api\";\nimport { StoryContext } from \"@storybook/types\";\nimport {\n  GLOBAL_KEY,\n  PARAM_KEY,\n  THEMING_EVENTS,\n  DEFAULT_THEME_PARAMETERS,\n  ThemeParameters,\n} from \"../constants\";\n\n/**\n *\n * @param StoryContext\n * @returns The global theme name set for your stories\n */\nexport function pluckThemeFromContext({ globals }: StoryContext): string {\n  return globals[GLOBAL_KEY] || \"\";\n}\n\nexport function useThemeParameters(): ThemeParameters {\n  return useParameter<ThemeParameters>(PARAM_KEY, DEFAULT_THEME_PARAMETERS);\n}\n\nexport function initializeThemeState(\n  themeNames: string[],\n  defaultTheme: string\n) {\n  addons.getChannel().emit(THEMING_EVENTS.REGISTER_THEMES, {\n    defaultTheme,\n    themes: themeNames,\n  });\n}\n","export const ADDON_ID = \"@storybook/addon-styling\" as const;\nexport const THEME_SWITCHER_ID = `${ADDON_ID}/theme-switcher` as const;\nexport const PARAM_KEY = \"theming\" as const;\nexport const GLOBAL_KEY = \"theme\" as const;\n\nexport interface ThemeAddonState {\n  themesList: string[];\n  themeDefault?: string;\n}\n\nexport const DEFAULT_ADDON_STATE: ThemeAddonState = {\n  themesList: [],\n  themeDefault: undefined,\n};\n\nexport interface ThemeParameters {\n  themeOverride?: string;\n}\n\nexport const DEFAULT_THEME_PARAMETERS: ThemeParameters = {};\n\nexport const THEMING_EVENTS = {\n  REGISTER_THEMES: `${THEME_SWITCHER_ID}/REGISTER_THEMES`,\n} as const;\n","import { useEffect } from \"@storybook/preview-api\";\nimport type { DecoratorFunction, Renderer } from \"@storybook/types\";\nimport {\n  initializeThemeState,\n  pluckThemeFromContext,\n  useThemeParameters,\n} from \"./helpers\";\n\nexport interface DataAttributeStrategyConfiguration {\n  themes: Record<string, string>;\n  defaultTheme: string;\n  parentSelector?: string;\n  attributeName?: string;\n}\n\nconst DEFAULT_ELEMENT_SELECTOR = \"html\";\nconst DEFAULT_DATA_ATTRIBUTE = \"data-theme\";\n\nexport const withThemeByDataAttribute = <\n  TRenderer extends Renderer = Renderer\n>({\n  themes,\n  defaultTheme,\n  parentSelector = DEFAULT_ELEMENT_SELECTOR,\n  attributeName = DEFAULT_DATA_ATTRIBUTE,\n}: DataAttributeStrategyConfiguration): DecoratorFunction<TRenderer> => {\n  initializeThemeState(Object.keys(themes), defaultTheme);\n  return (storyFn, context) => {\n    const { themeOverride } = useThemeParameters();\n    const selected = pluckThemeFromContext(context);\n\n    useEffect(() => {\n      const parentElement = document.querySelector(parentSelector);\n      const themeKey = themeOverride || selected || defaultTheme;\n\n      parentElement.setAttribute(attributeName, themes[themeKey]);\n    }, [themeOverride, selected, parentSelector, attributeName]);\n\n    return storyFn();\n  };\n};\n","import React from \"react\";\nimport { useMemo } from \"@storybook/preview-api\";\nimport { DecoratorFunction, Renderer } from \"@storybook/types\";\n\nimport {\n  initializeThemeState,\n  pluckThemeFromContext,\n  useThemeParameters,\n} from \"./helpers\";\n\ntype Theme = Record<string, any>;\ntype ThemeMap = Record<string, Theme>;\n\nexport interface ProviderStrategyConfiguration {\n  Provider?: any;\n  GlobalStyles?: any;\n  defaultTheme?: string;\n  themes?: ThemeMap;\n}\n\nconst pluckThemeFromKeyPairTuple = ([_, themeConfig]: [string, Theme]): Theme =>\n  themeConfig;\n\nexport const withThemeFromJSXProvider = <\n  TRenderer extends Renderer = Renderer\n>({\n  Provider,\n  GlobalStyles,\n  defaultTheme,\n  themes = {},\n}: ProviderStrategyConfiguration): DecoratorFunction<TRenderer> => {\n  const themeNames = Object.keys(themes);\n  const initialTheme = defaultTheme || themeNames[0];\n\n  initializeThemeState(themeNames, initialTheme);\n\n  return (storyFn, context) => {\n    const { themeOverride } = useThemeParameters();\n    const selected = pluckThemeFromContext(context);\n\n    const theme = useMemo(() => {\n      const selectedThemeName = themeOverride || selected || initialTheme;\n      const pairs = Object.entries(themes);\n\n      return pairs.length === 1\n        ? pluckThemeFromKeyPairTuple(pairs[0])\n        : themes[selectedThemeName];\n    }, [themes, selected, themeOverride]);\n\n    if(!Provider) {\n      return (\n        <>\n          {GlobalStyles && <GlobalStyles />}\n          {storyFn()}\n        </>\n      );\n    }\n\n    return (\n      <Provider theme={theme}>\n        {GlobalStyles && <GlobalStyles />}\n        {storyFn()}\n      </Provider>\n    );\n  };\n};\n","// make it work with --isolatedModules\nexport default {};\nexport * from \"./decorators\";\n"]}
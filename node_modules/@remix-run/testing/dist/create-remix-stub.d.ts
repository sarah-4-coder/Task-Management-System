import type { HydrationState, InitialEntry } from "@remix-run/router";
import type { UNSAFE_FutureConfig as FutureConfig } from "@remix-run/react";
import type { DataRouteObject, IndexRouteObject, NonIndexRouteObject } from "react-router-dom";
import type { ActionFunction, AppLoadContext, LoaderFunction } from "@remix-run/server-runtime";
type RemixStubOptions = {
    /**
     *  The initial entries in the history stack. This allows you to start a test with
     *  multiple locations already in the history stack (for testing a back navigation, etc.)
     *  The test will default to the last entry in initialEntries if no initialIndex is provided.
     *  e.g. initialEntries={["/home", "/about", "/contact"]}
     */
    initialEntries?: InitialEntry[];
    /**
     *  Used to set the route's initial loader and action data.
     *  e.g. hydrationData={{
     *   loaderData: { "/contact": { locale: "en-US" } },
     *   actionData: { "/login": { errors: { email: "invalid email" } }}
     *  }}
     */
    hydrationData?: HydrationState;
    /**
     * The initial index in the history stack to render. This allows you to start a test at a specific entry.
     * It defaults to the last entry in initialEntries.
     * e.g.
     *   initialEntries: ["/", "/events/123"]
     *   initialIndex: 1 // start at "/events/123"
     */
    initialIndex?: number;
    remixConfigFuture?: Partial<FutureConfig>;
};
interface StubIndexRouteObject extends Omit<IndexRouteObject, "loader" | "action"> {
    loader?: LoaderFunction;
    action?: ActionFunction;
}
interface StubNonIndexRouteObject extends Omit<NonIndexRouteObject, "loader" | "action"> {
    loader?: LoaderFunction;
    action?: ActionFunction;
}
type StubRouteObject = StubIndexRouteObject | StubNonIndexRouteObject;
type StubDataRouteObject = StubRouteObject & {
    children?: DataRouteObject[];
    id: string;
};
export declare function createRemixStub(routes: (StubRouteObject | StubDataRouteObject)[], context?: AppLoadContext): ({ initialEntries, initialIndex, hydrationData, remixConfigFuture, }: RemixStubOptions) => JSX.Element;
export {};
